# 기획 의도 : Flexible 범용 매크로 개발

# 기획
# Tree : Ctrl + X
# Tree : Group, inst 조작 (recur,event 등)
# Tree : Log,File,매크로 3개 레이어 분리
# Tree : 매크로 실행시 값 전달 확인
# Tree : IMTTreeAdvancedTraversal는 따로 interface 파일을 만들기
# Tree : 트리 아이템, 트리, 상태 히스토리 객체에 대한 불변성 보장(방어적 복사)
# Tree : 트리 순회 방식 BFS, DFS
# Tree : 확장된 트리 순회 인터페이스# 필터링 기능이 있는 고급 순회 인터페이스
T = TypeVar('T', bound=IMTItem)
class IMTTreeAdvancedTraversable(Protocol, Generic[T]):
    """확장된 매크로 트리 순회 인터페이스 - 필터링 기능 포함"""
    
    def traverse_filtered(self, predicate: Callable[[T], bool]) -> Iterator[T]:
        """트리를 순회하며 조건에 맞는 아이템 선택"""
        ...
# Tree : 간단한 직렬화 (to_dict, from_dict)는 모델
- 파일/DB 저장 관련 기능은 infra
# Tree : test 준비
# Tree : model, core 의존성 (MTItem)
# Tree : UIFramework와의 통합 구체화
# Tree : Repository, StateManager의 interface는 model에, 구현체는 infra 폴더에
# Tree : 비동기 처리 (load_tree_async : 콜백 기반 또는 async/await 사용)

# Tree : inst 추가 삭제
# Tree : Lock(실행시 제외)
# Tree : Image로 Pos 찾기
# Tree : Group,Ungroup,Copy,Paste
# Tree : Save as
# Opt_ : 시뮬레이션 기능. pos를 클릭할 때 스크린샷도 같이
# Opt_ : image 검색 사용시 검색 영역 지정 기능 추가
# Opt_ : getpos 영역 확대하기 + 멀티모니터 사용 고려
# Opt_ : 실행시 최소화, 완료시 최대화
# Opt_ : 현재 창의 Size 표시

# 진행
# Tree : all 선택
# Tree : 자기 자신에게 이동,종속시킬 때 에러
# Tree : typ,act combo 변경시도 undo 가능하게 : combo 박스 변경 후 treewidget을 찍어야만 undo가 가능한 문제
# Tree : Check된 inst만 실행
# Tree : Ctrl+left click시 복사 붙여넣기 되도록 + 여러개 선택시 모두 복사 되기

# 완료
# Tree : mouse -> sub_wid, key -> sub_wid
# Tree : ch.name 대신 ch.name -> name을 추가하기
# Tree : inst/group, item/top/not top, row/line 등의 네이밍 기준 정리
# Tree : cur 개선하기
# Tree : Subact 코드 정리
# Tree : Item 이동,삽입,삭제
# Tree : Mouse,Key 토글 버튼으로 바꾸기
# Tree : 우클릭 -> Context menu -> Delete
# Tree : Icon 넣기
# Func : Undo

# === 추가 검토/개선 제안 ===

# Model 계층 (전반)
# Model(Service) : 서비스 계층 역할 및 책임 재검토 및 리팩토링
# Model(Event) : 이벤트 시스템 설계 및 구현 검토/리팩토링 (Core와의 연계 포함)
# Persistence(DB) : postgresql_repository 리팩토링 (오류 처리, 쿼리 관리, 설정 등 이전 제안 사항 반영)

# Core 계층
# Core : get_children 성능 검토 및 최적화 (트리 규모 증가 대비, 예: 부모-자식 맵 활용)
# Core : remove_item 재귀 호출 방식 검토 (깊은 트리 대비 반복문 방식 고려)
# Core : 아이템 속성 접근 방식 일관성 검토 (TypedDict 외 @property, dataclass/attrs 등 장단점 비교)
# Core : 주요 인터페이스 (IMTTree, IMTItem 등) 문서화 강화 (메서드 제약조건, 예외 명시)
# Core : 트리 구조 및 아이템 객체의 불변성(immutability) 보장 강화 방안 검토 (방어적 복사 외 기법)

# Model/Persistence 계층
# Persistence(DB) : 오류 처리 세분화 검토 (psycopg2.Error 유형별 처리, 사용자 정의 예외 클래스 활용)
# Persistence(DB) : SQL 쿼리 관리 전략 구체화 (ORM 도입 타당성 검토 또는 상수/파일 분리 방식 확정)
# Persistence(DB) : DB 커넥션 풀링 도입 검토 (동시 사용자/요청 증가 대비 성능 향상 목적)
# Persistence(DB) : DB 접속 정보 외부 설정 관리 강화 (config.json 또는 환경 변수 일관 적용 확인)
# Persistence(DB) : ID/이름 기반 조회/삭제 메서드 명확화 (메서드 시그니처 분리 또는 파라미터 명확화 검토)
# Persistence(File) : 파일 저장 방식 상세 설계 (포맷 결정: JSON, YAML, Pickle 등, 오류 처리 방안)
# Model(Store) : 데이터 저장소 인터페이스(IMTStore) 통합 또는 분리 기준 재검토 (향후 확장성 고려)

# ViewModel 계층
# ViewModel : get_items 성능 및 구현 방식 검토 (데이터 캐싱, 부분 업데이트 전략, 부모 ID 조회 효율화)
# ViewModel : Core 인터페이스 타입 우선 사용 원칙 적용 검토 (구현 클래스 직접 의존 최소화)
# ViewModel : Undo/Redo 외 상태 관리 기능 확장 고려 (예: 특정 상태로 점프)

# 테스트
# Testing : 단위 테스트 커버리지 목표 설정 및 달성 (Core, Model, ViewModel 중요 로직 우선)
# Testing : 통합 테스트 시나리오 구체화 (DB 연동, 파일 저장/로드, 전체 기능 흐름 검증)
# Testing : 테스트 데이터 관리 방안 마련 (Fixture 등 활용)

# 설정 및 로깅
# Config : 설정 관리 전략 최종 검토 및 일관성 확보 (config.json 활용 방안 구체화)
# Logging : 로깅 레벨, 포맷, 핸들러 설정 구체화 및 표준화 (개발/운영 환경별 설정 분리 고려)

# 빌드 및 배포
# Build : 의존성 버전 관리 정책 확인 (requirements.txt 고정 방식 등) 및 주기적 업데이트 검토 (Dependabot 설정 활용)
# Build : 실행 파일 패키징 방안 검토 (PyInstaller, cx_Freeze 등)

# UI/UX (향후 UI 개발 시 고려)
# UI/UX : 장시간 실행 작업(매크로 실행, 데이터 로드 등)에 대한 사용자 피드백 메커니즘 설계
# UI/UX : 오류 발생 시 사용자 친화적인 알림 및 복구 가이드 제공 방안 설계
# UI/UX : 트리 뷰 상호작용 편의성 개선 아이디어 구체화 (드래그 앤 드롭 피드백, 편집 방식 등)
# UI/UX : Ctrl + X (잘라내기) 기능 구현
# UI/UX : Opt_ : 매크로 실행 시 창 최소화/완료 시 복원 기능 구현
# UI/UX : Opt_ : 현재 활성 창 크기 표시 기능 구현

# 아키텍처 검토
# 아키텍처 : Log, File, 매크로 실행 관련 레이어 분리 및 책임 검토
# 아키텍처 : Core-Model 간 의존성 관계 재검토 (특히 MTItem 관련)

# === 신규 기획/기능 구현 ===
# 기능 : 매크로 실행 시 아이템 값/컨텍스트 전달 메커니즘 구현 및 검증
# 기능 : 다른 이름으로 저장 (Save As) 기능 구현
# Core : 트리 순회 방식 추가 구현 (현재 BFS 외 DFS 등)
# Core : 필터링 기능 포함 확장된 트리 순회 인터페이스(traverse_filtered) 구현
# Model/Persistence : 비동기 데이터 로딩(load_tree_async) 구현 방안 검토 (async/await 등)
# Tree : 아이템 잠금(Lock) 기능 구현 (매크로 실행 시 제외 등)
# Tree : 그룹(Group) 및 인스턴스(inst) 조작 기능 구체화 (재귀 처리, 이벤트 연동 등)
# Tree : 아이템 그룹화/해제, 복사/붙여넣기 기능 구현 (Ctrl+C, Ctrl+V)
# 매크로 기능 : 이미지 기반 위치 찾기 기능 구현
# Opt_ : 매크로 시뮬레이션 기능 구현 (위치 클릭 시 스크린샷 표시 등)
# Opt_ : 이미지 검색 시 검색 영역 지정 기능 구현
# Opt_ : 위치 가져오기(getpos) 기능 개선 (영역 확대, 멀티모니터 지원)
# UI : PyQt6 기반 UI 통합 구체화 (ViewModel-View 연결)

# === 진행 중/수정 필요 ===
# 진행 - Tree : 전체 선택(Select All) 기능 구현/검토
# 진행 - Core : 아이템 이동 시 자기 자신 또는 하위 노드로 이동 방지 로직 검증/수정
# 진행 - UI/ViewModel : 콤보박스 변경 시 Undo/Redo 즉시 반영 문제 해결
# 진행 - Tree : 체크된 아이템만 매크로 실행 기능 구현
# 진행 - Tree : Ctrl+클릭 이용한 아이템 복사/붙여넣기 기능 구현 (다중 선택 지원)

# 코드 자동 분석/리포트 스크립트
- mypy . > mypy_report.txt  # 타입 검사 리포트
- flake8 . --format=html --htmldir=flake8_report  # 린트 리포트(HTML)
- radon cc . -s -a > radon_report.txt  # 코드 복잡도 리포트
- pytest --cov=. --cov-report=term-missing  # 테스트 커버리지 리포트

# 테스트 커버리지/품질 체크리스트
- [ ] 모든 핵심 함수/클래스에 단위 테스트가 있는가?
- [ ] 예외/에러 상황도 테스트하는가?
- [ ] 타입 검사(mypy 등)에서 에러가 없는가?
- [ ] 린트(PEP8, flake8 등) 에러가 없는가?
- [ ] 불필요한 코드/중복/미사용 import가 없는가?
- [ ] 주요 로직에 docstring/주석이 있는가?
- [ ] 인터페이스/추상화가 잘 지켜지는가?
- [ ] 테스트가 "실제 사용 시나리오"를 충분히 커버하는가?

# 드래그 앤 드롭 개선
- [ ] MTTreeWidget의 드래그 앤 드롭 로직 개선:
  - [ ] setDragDropMode(QAbstractItemView.DragDropMode.DragDrop)으로 변경 검토
  - [ ] mimeData() 오버라이드하여 아이템 ID 전달 구현
  - [ ] dropEvent()에서 mimeData() 파싱하여 아이템 이동 처리
  - [ ] 관련 Qt 문서 및 예제 학습 (QMimeData, QDrag, QDropEvent 등)